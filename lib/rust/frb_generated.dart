// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/secure_storage.dart';
import 'core/matrix_client/structs.dart';
import 'core/storage.dart';
import 'core/storage/factory.dart';
import 'core/storage/keychain.dart';
import 'core/storage/memory.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 340273889;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_skiffy',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<InMemoryStorage> crateCoreStorageMemoryInMemoryStorageDefault();

  Future<SessionStatus> crateCoreStorageMemoryInMemoryStorageIsPersistent({
    required InMemoryStorage that,
  });

  Future<InMemoryStorage> crateCoreStorageMemoryInMemoryStorageNew();

  Future<OwnedUserId?> crateCoreMatrixClientStructsMatrixClientGetUserInfo({
    required MatrixClient that,
  });

  Future<bool> crateCoreMatrixClientStructsMatrixClientIsLoggedIn({
    required MatrixClient that,
  });

  Future<void> crateCoreMatrixClientStructsMatrixClientLogin({
    required MatrixClient that,
    required String username,
    required String password,
  });

  Future<MatrixClient> crateCoreMatrixClientStructsMatrixClientNew({
    required String homeServerUrl,
    bool? disableRetries,
  });

  Future<void> crateCoreMatrixClientStructsMatrixClientSendMessage({
    required MatrixClient that,
    required String roomId,
    required String message,
  });

  Future<void> crateCoreMatrixClientStructsMatrixClientSync({
    required MatrixClient that,
  });

  Future<ArcSecureStorage> crateCoreStorageFactoryCreateMemoryStorage();

  Future<ArcSecureStorage> crateCoreStorageFactoryCreateSecureStorage();

  Future<void> crateApiSecureStorageInitializeSecureStorage();

  Future<bool> crateApiSecureStorageIsSecureStorageInitialized();

  Future<KeychainStorage> crateCoreStorageKeychainKeychainStorageDefault();

  Future<SessionStatus> crateCoreStorageKeychainKeychainStorageIsPersistent({
    required KeychainStorage that,
  });

  Future<KeychainStorage> crateCoreStorageKeychainKeychainStorageNew();

  Future<KeychainStorage>
  crateCoreStorageKeychainKeychainStorageWithServiceName({
    required String serviceName,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorAccessDenied({required String key});

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorBackendNotAvailable({
    required String reason,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInternalError({
    required String message,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInvalidInput({
    required String message,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorKeyNotFound({required String key});

  Future<SecureStorageApiError> crateApiSecureStorageSecureStorageApiErrorNew({
    required String message,
    required String errorType,
  });

  Future<void> crateApiSecureStorageSecureStorageClear();

  Future<void> crateApiSecureStorageSecureStorageDelete({required String key});

  Future<String> crateApiSecureStorageSecureStorageGet({required String key});

  Future<FfiSessionStatus> crateApiSecureStorageSecureStorageSessionStatus();

  Future<void> crateApiSecureStorageSecureStorageSet({
    required String key,
    required String value,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcSecureStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcSecureStorage;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcSecureStoragePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryStorage;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_InMemoryStoragePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MatrixClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MatrixClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MatrixClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OwnedUserId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OwnedUserId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OwnedUserIdPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<InMemoryStorage> crateCoreStorageMemoryInMemoryStorageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreStorageMemoryInMemoryStorageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageMemoryInMemoryStorageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "InMemoryStorage_default",
        argNames: [],
      );

  @override
  Future<SessionStatus> crateCoreStorageMemoryInMemoryStorageIsPersistent({
    required InMemoryStorage that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_session_status,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreStorageMemoryInMemoryStorageIsPersistentConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreStorageMemoryInMemoryStorageIsPersistentConstMeta =>
      const TaskConstMeta(
        debugName: "InMemoryStorage_is_persistent",
        argNames: ["that"],
      );

  @override
  Future<InMemoryStorage> crateCoreStorageMemoryInMemoryStorageNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreStorageMemoryInMemoryStorageNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageMemoryInMemoryStorageNewConstMeta =>
      const TaskConstMeta(
        debugName: "InMemoryStorage_new",
        argNames: [],
      );

  @override
  Future<OwnedUserId?> crateCoreMatrixClientStructsMatrixClientGetUserInfo({
    required MatrixClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateCoreMatrixClientStructsMatrixClientGetUserInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreMatrixClientStructsMatrixClientGetUserInfoConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_get_user_info",
        argNames: ["that"],
      );

  @override
  Future<bool> crateCoreMatrixClientStructsMatrixClientIsLoggedIn({
    required MatrixClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreMatrixClientStructsMatrixClientIsLoggedInConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreMatrixClientStructsMatrixClientIsLoggedInConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_is_logged_in",
        argNames: ["that"],
      );

  @override
  Future<void> crateCoreMatrixClientStructsMatrixClientLogin({
    required MatrixClient that,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreMatrixClientStructsMatrixClientLoginConstMeta,
        argValues: [that, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreMatrixClientStructsMatrixClientLoginConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_login",
        argNames: ["that", "username", "password"],
      );

  @override
  Future<MatrixClient> crateCoreMatrixClientStructsMatrixClientNew({
    required String homeServerUrl,
    bool? disableRetries,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(homeServerUrl, serializer);
          sse_encode_opt_box_autoadd_bool(disableRetries, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreMatrixClientStructsMatrixClientNewConstMeta,
        argValues: [homeServerUrl, disableRetries],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreMatrixClientStructsMatrixClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_new",
        argNames: ["homeServerUrl", "disableRetries"],
      );

  @override
  Future<void> crateCoreMatrixClientStructsMatrixClientSendMessage({
    required MatrixClient that,
    required String roomId,
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
            that,
            serializer,
          );
          sse_encode_String(roomId, serializer);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta:
            kCrateCoreMatrixClientStructsMatrixClientSendMessageConstMeta,
        argValues: [that, roomId, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreMatrixClientStructsMatrixClientSendMessageConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_send_message",
        argNames: ["that", "roomId", "message"],
      );

  @override
  Future<void> crateCoreMatrixClientStructsMatrixClientSync({
    required MatrixClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreMatrixClientStructsMatrixClientSyncConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreMatrixClientStructsMatrixClientSyncConstMeta =>
      const TaskConstMeta(
        debugName: "MatrixClient_sync",
        argNames: ["that"],
      );

  @override
  Future<ArcSecureStorage> crateCoreStorageFactoryCreateMemoryStorage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreStorageFactoryCreateMemoryStorageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageFactoryCreateMemoryStorageConstMeta =>
      const TaskConstMeta(
        debugName: "create_memory_storage",
        argNames: [],
      );

  @override
  Future<ArcSecureStorage> crateCoreStorageFactoryCreateSecureStorage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreStorageFactoryCreateSecureStorageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageFactoryCreateSecureStorageConstMeta =>
      const TaskConstMeta(
        debugName: "create_secure_storage",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageInitializeSecureStorage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageInitializeSecureStorageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageInitializeSecureStorageConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_secure_storage",
        argNames: [],
      );

  @override
  Future<bool> crateApiSecureStorageIsSecureStorageInitialized() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSecureStorageIsSecureStorageInitializedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageIsSecureStorageInitializedConstMeta =>
      const TaskConstMeta(
        debugName: "is_secure_storage_initialized",
        argNames: [],
      );

  @override
  Future<KeychainStorage> crateCoreStorageKeychainKeychainStorageDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keychain_storage,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreStorageKeychainKeychainStorageDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageKeychainKeychainStorageDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "keychain_storage_default",
        argNames: [],
      );

  @override
  Future<SessionStatus> crateCoreStorageKeychainKeychainStorageIsPersistent({
    required KeychainStorage that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_keychain_storage(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_session_status,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateCoreStorageKeychainKeychainStorageIsPersistentConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreStorageKeychainKeychainStorageIsPersistentConstMeta =>
      const TaskConstMeta(
        debugName: "keychain_storage_is_persistent",
        argNames: ["that"],
      );

  @override
  Future<KeychainStorage> crateCoreStorageKeychainKeychainStorageNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keychain_storage,
          decodeErrorData: sse_decode_secure_storage_error,
        ),
        constMeta: kCrateCoreStorageKeychainKeychainStorageNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreStorageKeychainKeychainStorageNewConstMeta =>
      const TaskConstMeta(
        debugName: "keychain_storage_new",
        argNames: [],
      );

  @override
  Future<KeychainStorage>
  crateCoreStorageKeychainKeychainStorageWithServiceName({
    required String serviceName,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(serviceName, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_keychain_storage,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateCoreStorageKeychainKeychainStorageWithServiceNameConstMeta,
        argValues: [serviceName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateCoreStorageKeychainKeychainStorageWithServiceNameConstMeta =>
      const TaskConstMeta(
        debugName: "keychain_storage_with_service_name",
        argNames: ["serviceName"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorAccessDenied({
    required String key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorAccessDeniedConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorAccessDeniedConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_access_denied",
        argNames: ["key"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorBackendNotAvailable({
    required String reason,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(reason, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorBackendNotAvailableConstMeta,
        argValues: [reason],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorBackendNotAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_backend_not_available",
        argNames: ["reason"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInternalError({
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorInternalErrorConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorInternalErrorConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_internal_error",
        argNames: ["message"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInvalidInput({
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorInvalidInputConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorInvalidInputConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_invalid_input",
        argNames: ["message"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorKeyNotFound({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorKeyNotFoundConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorKeyNotFoundConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_key_not_found",
        argNames: ["key"],
      );

  @override
  Future<SecureStorageApiError> crateApiSecureStorageSecureStorageApiErrorNew({
    required String message,
    required String errorType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          sse_encode_String(errorType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageApiErrorNewConstMeta,
        argValues: [message, errorType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageApiErrorNewConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_new",
        argNames: ["message", "errorType"],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageClear() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageClearConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageClearConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_clear",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageDelete({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageDeleteConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_delete",
        argNames: ["key"],
      );

  @override
  Future<String> crateApiSecureStorageSecureStorageGet({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageGetConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageGetConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_get",
        argNames: ["key"],
      );

  @override
  Future<FfiSessionStatus> crateApiSecureStorageSecureStorageSessionStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ffi_session_status,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageSessionStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageSessionStatusConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_session_status",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageSet({
    required String key,
    required String value,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          sse_encode_String(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageSetConstMeta,
        argValues: [key, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageSetConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_set",
        argNames: ["key", "value"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcSecureStorage => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcSecureStorage => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InMemoryStorage => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InMemoryStorage => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MatrixClient => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MatrixClient => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OwnedUserId => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OwnedUserId => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcSecureStorage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcSecureStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryStorage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MatrixClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MatrixClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedUserId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedUserIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MatrixClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MatrixClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryStorage
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MatrixClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MatrixClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcSecureStorage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcSecureStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InMemoryStorage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MatrixClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MatrixClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OwnedUserId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OwnedUserIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  SecureStorage dco_decode_TraitDef_SecureStorage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  OwnedUserId
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
      raw,
    );
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  KeychainStorage dco_decode_box_autoadd_keychain_storage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_keychain_storage(raw);
  }

  @protected
  FfiSessionStatus dco_decode_ffi_session_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiSessionStatus.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KeychainStorage dco_decode_keychain_storage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KeychainStorage(
      serviceName: dco_decode_String(arr[0]),
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OwnedUserId?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
            raw,
          );
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  SecureStorageApiError dco_decode_secure_storage_api_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SecureStorageApiError(
      message: dco_decode_String(arr[0]),
      errorType: dco_decode_String(arr[1]),
    );
  }

  @protected
  SecureStorageError dco_decode_secure_storage_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SecureStorageError_KeyNotFound(
          key: dco_decode_String(raw[1]),
        );
      case 1:
        return SecureStorageError_AccessDenied(
          key: dco_decode_String(raw[1]),
        );
      case 2:
        return SecureStorageError_BackendNotAvailable(
          reason: dco_decode_String(raw[1]),
        );
      case 3:
        return SecureStorageError_InvalidInput(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return SecureStorageError_Internal(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SessionStatus dco_decode_session_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcSecureStorage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcSecureStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryStorage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MatrixClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MatrixClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OwnedUserId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedUserIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MatrixClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MatrixClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryStorage
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MatrixClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MatrixClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcSecureStorage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcSecureStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InMemoryStorage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InMemoryStorageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MatrixClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MatrixClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OwnedUserId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OwnedUserIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  OwnedUserId
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
      deserializer,
    ));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  KeychainStorage sse_decode_box_autoadd_keychain_storage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_keychain_storage(deserializer));
  }

  @protected
  FfiSessionStatus sse_decode_ffi_session_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FfiSessionStatus.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KeychainStorage sse_decode_keychain_storage(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serviceName = sse_decode_String(deserializer);
    return KeychainStorage(serviceName: var_serviceName);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OwnedUserId?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SecureStorageApiError sse_decode_secure_storage_api_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    var var_errorType = sse_decode_String(deserializer);
    return SecureStorageApiError(
      message: var_message,
      errorType: var_errorType,
    );
  }

  @protected
  SecureStorageError sse_decode_secure_storage_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_key = sse_decode_String(deserializer);
        return SecureStorageError_KeyNotFound(key: var_key);
      case 1:
        var var_key = sse_decode_String(deserializer);
        return SecureStorageError_AccessDenied(key: var_key);
      case 2:
        var var_reason = sse_decode_String(deserializer);
        return SecureStorageError_BackendNotAvailable(reason: var_reason);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return SecureStorageError_InvalidInput(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return SecureStorageError_Internal(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SessionStatus sse_decode_session_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SessionStatus.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    ArcSecureStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcSecureStorageImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    InMemoryStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryStorageImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    MatrixClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MatrixClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    OwnedUserId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OwnedUserIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    MatrixClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MatrixClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    InMemoryStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryStorageImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    MatrixClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MatrixClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynSecureStorage(
    ArcSecureStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcSecureStorageImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInMemoryStorage(
    InMemoryStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InMemoryStorageImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMatrixClient(
    MatrixClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MatrixClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    OwnedUserId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OwnedUserIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    OwnedUserId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_keychain_storage(
    KeychainStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_keychain_storage(self, serializer);
  }

  @protected
  void sse_encode_ffi_session_status(
    FfiSessionStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_keychain_storage(
    KeychainStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serviceName, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
    OwnedUserId? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOwnedUserId(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_secure_storage_api_error(
    SecureStorageApiError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.errorType, serializer);
  }

  @protected
  void sse_encode_secure_storage_error(
    SecureStorageError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SecureStorageError_KeyNotFound(key: final key):
        sse_encode_i_32(0, serializer);
        sse_encode_String(key, serializer);
      case SecureStorageError_AccessDenied(key: final key):
        sse_encode_i_32(1, serializer);
        sse_encode_String(key, serializer);
      case SecureStorageError_BackendNotAvailable(reason: final reason):
        sse_encode_i_32(2, serializer);
        sse_encode_String(reason, serializer);
      case SecureStorageError_InvalidInput(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case SecureStorageError_Internal(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_session_status(SessionStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcSecureStorageImpl extends RustOpaque implements ArcSecureStorage {
  // Not to be used by end users
  ArcSecureStorageImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcSecureStorageImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcSecureStorage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcSecureStorage,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcSecureStoragePtr,
  );
}

@sealed
class InMemoryStorageImpl extends RustOpaque implements InMemoryStorage {
  // Not to be used by end users
  InMemoryStorageImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InMemoryStorageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_InMemoryStorage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_InMemoryStorage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_InMemoryStoragePtr,
  );

  Future<SessionStatus> isPersistent() =>
      RustLib.instance.api.crateCoreStorageMemoryInMemoryStorageIsPersistent(
        that: this,
      );
}

@sealed
class MatrixClientImpl extends RustOpaque implements MatrixClient {
  // Not to be used by end users
  MatrixClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MatrixClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MatrixClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MatrixClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MatrixClientPtr,
  );

  Future<OwnedUserId?> getUserInfo() =>
      RustLib.instance.api.crateCoreMatrixClientStructsMatrixClientGetUserInfo(
        that: this,
      );

  Future<bool> isLoggedIn() =>
      RustLib.instance.api.crateCoreMatrixClientStructsMatrixClientIsLoggedIn(
        that: this,
      );

  Future<void> login({required String username, required String password}) =>
      RustLib.instance.api.crateCoreMatrixClientStructsMatrixClientLogin(
        that: this,
        username: username,
        password: password,
      );

  Future<void> sendMessage({required String roomId, required String message}) =>
      RustLib.instance.api.crateCoreMatrixClientStructsMatrixClientSendMessage(
        that: this,
        roomId: roomId,
        message: message,
      );

  Future<void> sync_() =>
      RustLib.instance.api.crateCoreMatrixClientStructsMatrixClientSync(
        that: this,
      );
}

@sealed
class OwnedUserIdImpl extends RustOpaque implements OwnedUserId {
  // Not to be used by end users
  OwnedUserIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OwnedUserIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OwnedUserId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedUserId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OwnedUserIdPtr,
  );
}
