// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/auth.dart';
import 'api/secure_storage.dart';
import 'core/storage.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1124453273;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_skiffy',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<bool> crateApiAuthHasStoredSession();

  Future<void> crateApiSecureStorageInitializeSecureStorage();

  Future<bool> crateApiSecureStorageIsSecureStorageInitialized();

  Future<User> crateApiAuthLogin({
    required String homeServerUrl,
    required String username,
    required String password,
  });

  Future<void> crateApiAuthLogout({required String homeServerUrl});

  Future<User?> crateApiAuthRestoreSession({required String homeServerUrl});

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorAccessDenied({required String key});

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorBackendNotAvailable({
    required String reason,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInternalError({
    required String message,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInvalidInput({
    required String message,
  });

  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorKeyNotFound({required String key});

  Future<SecureStorageApiError> crateApiSecureStorageSecureStorageApiErrorNew({
    required String message,
    required String errorType,
  });

  Future<void> crateApiSecureStorageSecureStorageClear();

  Future<void> crateApiSecureStorageSecureStorageDelete({required String key});

  Future<String> crateApiSecureStorageSecureStorageGet({required String key});

  Future<FfiSessionStatus> crateApiSecureStorageSecureStorageSessionStatus();

  Future<void> crateApiSecureStorageSecureStorageSet({
    required String key,
    required String value,
  });

  Future<bool> crateApiAuthVerifyHomeserver({required String homeServerUrl});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<bool> crateApiAuthHasStoredSession() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_auth_error,
        ),
        constMeta: kCrateApiAuthHasStoredSessionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthHasStoredSessionConstMeta =>
      const TaskConstMeta(
        debugName: "has_stored_session",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageInitializeSecureStorage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageInitializeSecureStorageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageInitializeSecureStorageConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_secure_storage",
        argNames: [],
      );

  @override
  Future<bool> crateApiSecureStorageIsSecureStorageInitialized() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSecureStorageIsSecureStorageInitializedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageIsSecureStorageInitializedConstMeta =>
      const TaskConstMeta(
        debugName: "is_secure_storage_initialized",
        argNames: [],
      );

  @override
  Future<User> crateApiAuthLogin({
    required String homeServerUrl,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(homeServerUrl, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_user,
          decodeErrorData: sse_decode_auth_error,
        ),
        constMeta: kCrateApiAuthLoginConstMeta,
        argValues: [homeServerUrl, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthLoginConstMeta => const TaskConstMeta(
    debugName: "login",
    argNames: ["homeServerUrl", "username", "password"],
  );

  @override
  Future<void> crateApiAuthLogout({required String homeServerUrl}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(homeServerUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_auth_error,
        ),
        constMeta: kCrateApiAuthLogoutConstMeta,
        argValues: [homeServerUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthLogoutConstMeta => const TaskConstMeta(
    debugName: "logout",
    argNames: ["homeServerUrl"],
  );

  @override
  Future<User?> crateApiAuthRestoreSession({required String homeServerUrl}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(homeServerUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_user,
          decodeErrorData: sse_decode_auth_error,
        ),
        constMeta: kCrateApiAuthRestoreSessionConstMeta,
        argValues: [homeServerUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthRestoreSessionConstMeta => const TaskConstMeta(
    debugName: "restore_session",
    argNames: ["homeServerUrl"],
  );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorAccessDenied({
    required String key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorAccessDeniedConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorAccessDeniedConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_access_denied",
        argNames: ["key"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorBackendNotAvailable({
    required String reason,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(reason, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorBackendNotAvailableConstMeta,
        argValues: [reason],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorBackendNotAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_backend_not_available",
        argNames: ["reason"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInternalError({
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorInternalErrorConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorInternalErrorConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_internal_error",
        argNames: ["message"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorInvalidInput({
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorInvalidInputConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorInvalidInputConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_invalid_input",
        argNames: ["message"],
      );

  @override
  Future<SecureStorageApiError>
  crateApiSecureStorageSecureStorageApiErrorKeyNotFound({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSecureStorageSecureStorageApiErrorKeyNotFoundConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSecureStorageSecureStorageApiErrorKeyNotFoundConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_key_not_found",
        argNames: ["key"],
      );

  @override
  Future<SecureStorageApiError> crateApiSecureStorageSecureStorageApiErrorNew({
    required String message,
    required String errorType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          sse_encode_String(errorType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_secure_storage_api_error,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageApiErrorNewConstMeta,
        argValues: [message, errorType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageApiErrorNewConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_api_error_new",
        argNames: ["message", "errorType"],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageClear() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageClearConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageClearConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_clear",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageDelete({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageDeleteConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_delete",
        argNames: ["key"],
      );

  @override
  Future<String> crateApiSecureStorageSecureStorageGet({required String key}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageGetConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageGetConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_get",
        argNames: ["key"],
      );

  @override
  Future<FfiSessionStatus> crateApiSecureStorageSecureStorageSessionStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ffi_session_status,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageSessionStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageSessionStatusConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_session_status",
        argNames: [],
      );

  @override
  Future<void> crateApiSecureStorageSecureStorageSet({
    required String key,
    required String value,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(key, serializer);
          sse_encode_String(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_secure_storage_api_error,
        ),
        constMeta: kCrateApiSecureStorageSecureStorageSetConstMeta,
        argValues: [key, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSecureStorageSecureStorageSetConstMeta =>
      const TaskConstMeta(
        debugName: "secure_storage_set",
        argNames: ["key", "value"],
      );

  @override
  Future<bool> crateApiAuthVerifyHomeserver({required String homeServerUrl}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(homeServerUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_homeserver_error,
        ),
        constMeta: kCrateApiAuthVerifyHomeserverConstMeta,
        argValues: [homeServerUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthVerifyHomeserverConstMeta =>
      const TaskConstMeta(
        debugName: "verify_homeserver",
        argNames: ["homeServerUrl"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AuthError dco_decode_auth_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AuthError_Authentication(
          dco_decode_String(raw[1]),
        );
      case 1:
        return AuthError_Storage(
          dco_decode_box_autoadd_secure_storage_error(raw[1]),
        );
      case 2:
        return AuthError_SessionNotFound();
      case 3:
        return AuthError_Network(
          dco_decode_String(raw[1]),
        );
      case 4:
        return AuthError_InvalidInput(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  SecureStorageError dco_decode_box_autoadd_secure_storage_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_secure_storage_error(raw);
  }

  @protected
  User dco_decode_box_autoadd_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user(raw);
  }

  @protected
  FfiSessionStatus dco_decode_ffi_session_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiSessionStatus.values[raw as int];
  }

  @protected
  HomeserverError dco_decode_homeserver_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return HomeserverError_ConnectionTimeout();
      case 1:
        return HomeserverError_ReadTimeout();
      case 2:
        return HomeserverError_DnsResolutionFailed();
      case 3:
        return HomeserverError_NetworkUnavailable();
      case 4:
        return HomeserverError_InvalidUrl();
      case 5:
        return HomeserverError_NotHttps();
      case 6:
        return HomeserverError_NotMatrixServer();
      case 7:
        return HomeserverError_MalformedResponse();
      case 8:
        return HomeserverError_UnsupportedVersion();
      case 9:
        return HomeserverError_ServerError(
          dco_decode_u_16(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  User? dco_decode_opt_box_autoadd_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_user(raw);
  }

  @protected
  SecureStorageApiError dco_decode_secure_storage_api_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SecureStorageApiError(
      message: dco_decode_String(arr[0]),
      errorType: dco_decode_String(arr[1]),
    );
  }

  @protected
  SecureStorageError dco_decode_secure_storage_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SecureStorageError_KeyNotFound(
          key: dco_decode_String(raw[1]),
        );
      case 1:
        return SecureStorageError_AccessDenied(
          key: dco_decode_String(raw[1]),
        );
      case 2:
        return SecureStorageError_BackendNotAvailable(
          reason: dco_decode_String(raw[1]),
        );
      case 3:
        return SecureStorageError_InvalidInput(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return SecureStorageError_Internal(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  User dco_decode_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return User(
      userId: dco_decode_String(arr[0]),
      isRestoredSession: dco_decode_bool(arr[1]),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AuthError sse_decode_auth_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return AuthError_Authentication(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_secure_storage_error(
          deserializer,
        );
        return AuthError_Storage(var_field0);
      case 2:
        return AuthError_SessionNotFound();
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return AuthError_Network(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return AuthError_InvalidInput(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  SecureStorageError sse_decode_box_autoadd_secure_storage_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_secure_storage_error(deserializer));
  }

  @protected
  User sse_decode_box_autoadd_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user(deserializer));
  }

  @protected
  FfiSessionStatus sse_decode_ffi_session_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FfiSessionStatus.values[inner];
  }

  @protected
  HomeserverError sse_decode_homeserver_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return HomeserverError_ConnectionTimeout();
      case 1:
        return HomeserverError_ReadTimeout();
      case 2:
        return HomeserverError_DnsResolutionFailed();
      case 3:
        return HomeserverError_NetworkUnavailable();
      case 4:
        return HomeserverError_InvalidUrl();
      case 5:
        return HomeserverError_NotHttps();
      case 6:
        return HomeserverError_NotMatrixServer();
      case 7:
        return HomeserverError_MalformedResponse();
      case 8:
        return HomeserverError_UnsupportedVersion();
      case 9:
        var var_field0 = sse_decode_u_16(deserializer);
        return HomeserverError_ServerError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  User? sse_decode_opt_box_autoadd_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_user(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SecureStorageApiError sse_decode_secure_storage_api_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    var var_errorType = sse_decode_String(deserializer);
    return SecureStorageApiError(
      message: var_message,
      errorType: var_errorType,
    );
  }

  @protected
  SecureStorageError sse_decode_secure_storage_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_key = sse_decode_String(deserializer);
        return SecureStorageError_KeyNotFound(key: var_key);
      case 1:
        var var_key = sse_decode_String(deserializer);
        return SecureStorageError_AccessDenied(key: var_key);
      case 2:
        var var_reason = sse_decode_String(deserializer);
        return SecureStorageError_BackendNotAvailable(reason: var_reason);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return SecureStorageError_InvalidInput(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return SecureStorageError_Internal(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  User sse_decode_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_isRestoredSession = sse_decode_bool(deserializer);
    return User(userId: var_userId, isRestoredSession: var_isRestoredSession);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_auth_error(AuthError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AuthError_Authentication(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case AuthError_Storage(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_secure_storage_error(field0, serializer);
      case AuthError_SessionNotFound():
        sse_encode_i_32(2, serializer);
      case AuthError_Network(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case AuthError_InvalidInput(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_secure_storage_error(
    SecureStorageError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_secure_storage_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user(self, serializer);
  }

  @protected
  void sse_encode_ffi_session_status(
    FfiSessionStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_homeserver_error(
    HomeserverError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case HomeserverError_ConnectionTimeout():
        sse_encode_i_32(0, serializer);
      case HomeserverError_ReadTimeout():
        sse_encode_i_32(1, serializer);
      case HomeserverError_DnsResolutionFailed():
        sse_encode_i_32(2, serializer);
      case HomeserverError_NetworkUnavailable():
        sse_encode_i_32(3, serializer);
      case HomeserverError_InvalidUrl():
        sse_encode_i_32(4, serializer);
      case HomeserverError_NotHttps():
        sse_encode_i_32(5, serializer);
      case HomeserverError_NotMatrixServer():
        sse_encode_i_32(6, serializer);
      case HomeserverError_MalformedResponse():
        sse_encode_i_32(7, serializer);
      case HomeserverError_UnsupportedVersion():
        sse_encode_i_32(8, serializer);
      case HomeserverError_ServerError(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_u_16(field0, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_user(User? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_user(self, serializer);
    }
  }

  @protected
  void sse_encode_secure_storage_api_error(
    SecureStorageApiError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.errorType, serializer);
  }

  @protected
  void sse_encode_secure_storage_error(
    SecureStorageError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SecureStorageError_KeyNotFound(key: final key):
        sse_encode_i_32(0, serializer);
        sse_encode_String(key, serializer);
      case SecureStorageError_AccessDenied(key: final key):
        sse_encode_i_32(1, serializer);
        sse_encode_String(key, serializer);
      case SecureStorageError_BackendNotAvailable(reason: final reason):
        sse_encode_i_32(2, serializer);
        sse_encode_String(reason, serializer);
      case SecureStorageError_InvalidInput(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case SecureStorageError_Internal(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_bool(self.isRestoredSession, serializer);
  }
}
