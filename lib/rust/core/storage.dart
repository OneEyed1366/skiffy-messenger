// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:skiffy/rust/frb_generated.dart';

part 'storage.freezed.dart';

// These functions are ignored because they have generic arguments: `clear`, `delete`, `get`, `set`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`, `fmt`, `fmt`

abstract class SecureStorage {
  /// Check if the storage backend provides persistent storage
  ///
  /// # Returns
  ///
  /// Returns `SessionStatus::Persistent` if data survives app restarts,
  /// `SessionStatus::NonPersistent` if data is only stored in memory.
  Future<SessionStatus> isPersistent();
}

@freezed
sealed class SecureStorageError
    with _$SecureStorageError
    implements FrbException {
  const SecureStorageError._();

  /// The key was not found in storage
  const factory SecureStorageError.keyNotFound({
    required String key,
  }) = SecureStorageError_KeyNotFound;

  /// Access was denied by the storage backend
  const factory SecureStorageError.accessDenied({
    required String key,
  }) = SecureStorageError_AccessDenied;

  /// The storage backend is not available
  const factory SecureStorageError.backendNotAvailable({
    required String reason,
  }) = SecureStorageError_BackendNotAvailable;

  /// Invalid input was provided
  const factory SecureStorageError.invalidInput({
    required String message,
  }) = SecureStorageError_InvalidInput;

  /// An internal error occurred
  const factory SecureStorageError.internal({
    required String message,
  }) = SecureStorageError_Internal;
}

/// Status of the storage session persistence
enum SessionStatus {
  /// Session data is securely persisted across app restarts
  persistent,

  /// Session data is only stored in memory and will be lost on app restart
  nonPersistent,
}
