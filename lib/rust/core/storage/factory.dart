// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:skiffy/rust/frb_generated.dart';

// These functions are ignored because they are not marked as `pub`: `create_platform_storage`

/// Creates the appropriate secure storage implementation for the current platform
///
/// This factory function detects the current platform and creates the most appropriate
/// secure storage backend. For Linux, it attempts to create a Secret Service-based
/// storage and falls back to in-memory storage if the service is unavailable.
///
/// # Platform Support
///
/// - **macOS/iOS**: Uses Keychain Services via the `security-framework` crate
/// - **Windows**: Uses Credential Manager via the `keyring` crate
/// - **Linux**: Uses Secret Service API via the `keyring` crate, falls back to in-memory storage
///
/// # Returns
///
/// Returns `Ok(SecureStorageRef)` with the appropriate storage backend,
/// or an error if initialization fails.
///
/// # Examples
///
/// ```rust
/// use crate::core::storage::create_secure_storage;
///
/// #[tokio::main]
/// async fn main() -> anyhow::Result<()> {
///     let storage = create_secure_storage().await?;
///
///     // Use storage...
///     storage.set("key", "value").await?;
///
///     Ok(())
/// }
/// ```
Future<ArcSecureStorage> createSecureStorage() =>
    RustLib.instance.api.crateCoreStorageFactoryCreateSecureStorage();

/// Creates an in-memory storage instance for testing purposes
///
/// This function is useful for unit tests and scenarios where you need
/// a predictable, isolated storage backend.
///
/// # Returns
///
/// Returns a new `SecureStorageRef` backed by in-memory storage.
Future<ArcSecureStorage> createMemoryStorage() =>
    RustLib.instance.api.crateCoreStorageFactoryCreateMemoryStorage();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < dyn SecureStorage >>>
abstract class ArcSecureStorage implements RustOpaqueInterface {}
